name: Test Suite

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  # Unit Tests
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: [3.8, 3.9, "3.10", "3.11"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ matrix.python-version }}-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run unit tests
        run: |
          python -m pytest tests/test_converter.py -v --cov=html_to_docx_converter --cov-report=xml --cov-report=html

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unit-tests
          name: unit-coverage

  # Windows Tests
  windows-tests:
    name: Windows Tests
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run integration tests
        run: |
          python test_converter.py

      - name: Test service utilities
        run: |
          python -c "import win32serviceutil; print('Windows service utilities available')"

  # UI Tests (Windows only)
  ui-tests:
    name: UI Tests
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Install Chrome
        uses: browser-actions/setup-chrome@v1

      - name: Run UI tests
        run: |
          python -m pytest tests/test_ui.py -v

  # Code Quality
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black bandit safety

      - name: Run linting
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Run format check
        run: |
          black --check --diff .

      - name: Run security scan
        run: |
          bandit -r . -f json -o bandit-report.json || true
          safety check --json --output safety-report.json || true

      - name: Upload security reports
        uses: actions/upload-artifact@v3
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json
          retention-days: 30

  # Build Test
  build-test:
    name: Build Test
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Test standalone build
        run: |
          python build_exe.py

      - name: Verify executable
        run: |
          if (Test-Path "dist/HTMLtoDOCXConverter.exe") {
            Write-Host "✅ Standalone executable created successfully"
            Get-Item "dist/HTMLtoDOCXConverter.exe" | Select-Object Name, Length
          } else {
            Write-Host "❌ Standalone executable not found"
            exit 1
          }

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: dist/
          retention-days: 30

  # Documentation Check
  docs-check:
    name: Documentation Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check README files
        run: |
          if [ -f "README.md" ]; then
            echo "✅ README.md exists"
          else
            echo "❌ README.md missing"
            exit 1
          fi

          if [ -f "README_STANDALONE.md" ]; then
            echo "✅ README_STANDALONE.md exists"
          else
            echo "❌ README_STANDALONE.md missing"
            exit 1
          fi

      - name: Validate markdown
        run: |
          pip install markdown-link-check
          markdown-link-check README.md || true
          markdown-link-check README_STANDALONE.md || true
